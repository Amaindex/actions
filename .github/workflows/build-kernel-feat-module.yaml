name: Build Kernel for PVE/QEMU VM (Rebuild Docker Config from Kconfig)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64] # Assuming x86_64 build

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync \
                                  git

      - name: Configure Kernel using Fragments
        run: |
          echo "--- Creating Configuration Fragments ---"

          # --- Base Server Fragment (Minimal) ---
          # Keep only absolute bare minimum for booting and virtio block/rng
          cat <<EOF > base_server.config
          CONFIG_MODULES=y
          CONFIG_BLOCK=y                  # Needed for any block device
          CONFIG_BLK_DEV_SD=y             # Basic SCSI disk (might be needed by virtio-scsi if used)
          CONFIG_SCSI=y
          CONFIG_VIRTIO_PCI=y             # Virtio PCI device support
          CONFIG_VIRTIO_BLK=y             # Virtio Block device
          CONFIG_EXT4_FS=y                # Root filesystem likely EXT4
          CONFIG_VFAT_FS=y                # EFI partition / boot
          CONFIG_NLS=y                    # For VFAT
          CONFIG_PARTITION_ADVANCED=y
          CONFIG_EFI_PARTITION=y
          CONFIG_MSDOS_PARTITION=y
          CONFIG_BLK_DEV_INITRD=y
          CONFIG_DEVTMPFS=y
          CONFIG_DEVTMPFS_MOUNT=y
          CONFIG_HW_RANDOM_VIRTIO=y       # Virtio RNG
          CONFIG_TMPFS=y                  # Basic tmpfs support
          # Networking core (NET, INET, IPV6) will be enabled by docker fragment
          EOF

          # --- Docker Config Fragment (Strictly based on Kconfig selects) ---
          cat <<EOF > docker_from_kconfig.config
          # --- From "config DOCKER" selects ---
          CONFIG_PROC_PID_CPUSET=y
          CONFIG_NET=y
          CONFIG_NETDEVICES=y
          CONFIG_NET_CORE=y
          CONFIG_INET=y
          CONFIG_IPV6=y
          CONFIG_NET_L3_MASTER_DEV=y
          CONFIG_NETFILTER=y
          CONFIG_NETFILTER_ADVANCED=y
          CONFIG_NF_CONNTRACK=y
          CONFIG_NETFILTER_XTABLES=y
          # CONFIG_NF_CONNMARK_IPV4=y # Let Kconfig handle this dependency if needed
          CONFIG_IP_NF_IPTABLES=y         # Explicitly selected
          CONFIG_NF_NAT_MASQUERADE_IPV4=y # Explicitly selected (might be NF_NAT helper)
          CONFIG_IP_NF_NAT=y              # Explicitly selected
          # CONFIG_IP_NF_TARGET_NETMAP=y # Marked TODO, skip
          CONFIG_IP_NF_TARGET_REDIRECT=y  # Explicitly selected
          CONFIG_NET_SCHED=y
          CONFIG_CGROUP_NET_PRIO=y
          CONFIG_CGROUP_NET_CLASSID=y
          # CONFIG_MD=y # Skip unless specifically needed
          CONFIG_TTY=y
          CONFIG_UNIX98_PTYS=y
          # CONFIG_HUGETLBFS=y # Marked TODO, skip
          CONFIG_PERSISTENT_KEYRINGS=y
          CONFIG_ENCRYPTED_KEYS=y
          # CONFIG_KEY_DH_OPERATIONS=y # Skip

          # --- From "From ebuild" section selects ---
          CONFIG_NAMESPACES=y
          CONFIG_NET_NS=y
          CONFIG_PID_NS=y
          CONFIG_IPC_NS=y
          CONFIG_UTS_NS=y
          CONFIG_CGROUPS=y
          CONFIG_CGROUP_CPUACCT=y
          CONFIG_CGROUP_DEVICE=y
          CONFIG_CGROUP_FREEZER=y
          CONFIG_CGROUP_SCHED=y
          CONFIG_CPUSETS=y
          CONFIG_MEMCG=y
          CONFIG_KEYS=y
          CONFIG_VETH=m                   # Module
          CONFIG_BRIDGE=y
          CONFIG_BRIDGE_NETFILTER=y
          CONFIG_NF_NAT_IPV4=y            # Explicitly selected (nftables NAT core)
          CONFIG_IP_NF_FILTER=y           # Explicitly selected
          CONFIG_IP_NF_TARGET_MASQUERADE=y # Explicitly selected (legacy target)
          CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
          CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
          CONFIG_NF_NAT=y                 # Explicitly selected (core NAT framework)
          CONFIG_NF_NAT_NEEDED=y          # Explicitly selected
          CONFIG_POSIX_MQUEUE=y
          CONFIG_USER_NS=y
          CONFIG_SECCOMP=y
          CONFIG_CGROUP_PIDS=y
          CONFIG_BLK_DEV_THROTTLING=y     # Explicitly selected
          # CONFIG_CFQ_GROUP_IOSCHED=y # Skip, CFQ less common
          CONFIG_CGROUP_HUGETLB=y
          CONFIG_NET_CLS_CGROUP=y
          CONFIG_FAIR_GROUP_SCHED=y
          CONFIG_RT_GROUP_SCHED=y
          CONFIG_IP_VS=m                  # Module
          CONFIG_IP_VS_PROTO_TCP=m        # Module
          CONFIG_IP_VS_PROTO_UDP=m        # Module
          CONFIG_IP_VS_NFCT=m             # Module
          CONFIG_VXLAN=m                  # Module
          CONFIG_IPVLAN=m                 # Module
          CONFIG_MACVLAN=m                # Module
          CONFIG_DUMMY=m                  # Module
          CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
          CONFIG_MEMCG_KMEM=y

          # --- From DOCKER_STATISTICS selects (default y) ---
          CONFIG_RESOURCE_COUNTERS=y
          CONFIG_BLK_CGROUP=y
          CONFIG_IOSCHED_CFQ=y            # Keep CFQ for now based on Kconfig
          CONFIG_CGROUP_PERF=y
          CONFIG_CFS_BANDWIDTH=y

          # --- From DOCKER_SECURE_NETWORKS selects (default y) ---
          CONFIG_XFRM_ALGO=y
          CONFIG_XFRM_USER=y

          # --- From DOCKER_DEVICE_MAPPER selects (default y) ---
          CONFIG_BLK_DEV_DM=y
          CONFIG_DM_THIN_PROVISIONING=y
          # CONFIG_EXT4_FS=y # Already in base
          CONFIG_EXT4_FS_POSIX_ACL=y
          CONFIG_EXT4_FS_SECURITY=y

          # --- From DOCKER_OVERLAY_FS selects (default y) ---
          CONFIG_OVERLAY_FS=y
          # CONFIG_EXT4_FS_SECURITY=y # Duplicate
          # CONFIG_EXT4_FS_POSIX_ACL=y # Duplicate

          # --- Explicitly add NF_TABLES compatibility based on recent errors ---
          # Although not explicitly selected, the error suggests it might be needed by iptables-nft
          CONFIG_NF_TABLES=y              # Base nf_tables support
          CONFIG_NF_TABLES_IPV4=y         # Enable nf_tables IPv4 support
          CONFIG_NF_TABLES_IPV6=y         # Enable nf_tables IPv6 support
          CONFIG_NF_TABLES_COMPAT=y       # Add compatibility layer support
          CONFIG_NFT_COMPAT=y             # Select the module/code for compat
          CONFIG_NFT_REJECT_IPV4=y        # Seems needed for full iptables-nft compat
          CONFIG_NFT_MASQ_IPV4=y          # Ensure nftables native MASQ is available
          EOF


          # --- Tailscale Support Fragment (Minimal) ---
          cat <<EOF > tailscale.config
          CONFIG_TUN=m                  # TUN device support
          # Most networking covered by docker fragment
          EOF

          # --- Debug Fragment ---
          # (保持不变)
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y
          CONFIG_IKCONFIG_PROC=y
          EOF

          # --- Disable Unnecessary Fragment ---
          # (保持不变)
          cat <<EOF > disable.config
          # CONFIG_DRM is not set
          # CONFIG_SND is not set
          # CONFIG_SOUND is not set
          # CONFIG_USB_COMMON is not set
          # CONFIG_HID is not set
          # CONFIG_CFG80211 is not set
          # CONFIG_TIGON3 is not set
          # CONFIG_E100 is not set
          # CONFIG_E1000E is not set
          # CONFIG_R8169 is not set
          # CONFIG_BNX2 is not set
          EOF

          echo "--- Starting Base Configuration (defconfig) ---"
          make defconfig

          echo "--- Merging Custom Configuration Fragments ---"
          # Use the new docker_from_kconfig fragment
          ./scripts/kconfig/merge_config.sh -m .config \
              base_server.config \
              docker_from_kconfig.config \
              tailscale.config \
              debug.config \
              disable.config

          # *** 调试步骤 1: 检查 合并后、第一个 olddefconfig 之前 的配置 (更新grep) ***
          echo "--- Config AFTER merge, BEFORE olddefconfig ---"
          echo "Checking critical Docker network options:"
          # Monitor key options selected by the Kconfig, including *both* NAT implementations
          grep -E '^CONFIG_BRIDGE=|^# CONFIG_BRIDGE |^CONFIG_BRIDGE_NETFILTER=|^# CONFIG_BRIDGE_NETFILTER |^CONFIG_OVERLAY_FS=|^# CONFIG_OVERLAY_FS |^CONFIG_VETH=|^# CONFIG_VETH |^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE |^CONFIG_NF_NAT_IPV4=|^# CONFIG_NF_NAT_IPV4 |^CONFIG_NF_NAT_NEEDED=|^# CONFIG_NF_NAT_NEEDED |^CONFIG_NF_NAT_MASQUERADE_IPV4=|^# CONFIG_NF_NAT_MASQUERADE_IPV4 |^CONFIG_NFT_MASQ_IPV4=|^# CONFIG_NFT_MASQ_IPV4 |^CONFIG_NF_TABLES_COMPAT=|^# CONFIG_NF_TABLES_COMPAT ' .config || echo "关键Docker网络配置状态未找到或状态未知"
          echo "---------------------------------------------"

          echo "--- Applying Merged Configuration (olddefconfig) ---"
          make olddefconfig

          # *** 调试步骤 2: 检查 第一个 olddefconfig 之后 的配置 (更新grep) ***
          echo "--- Config AFTER first olddefconfig ---"
          echo "Checking critical Docker network options:"
          grep -E '^CONFIG_BRIDGE=|^# CONFIG_BRIDGE |^CONFIG_BRIDGE_NETFILTER=|^# CONFIG_BRIDGE_NETFILTER |^CONFIG_OVERLAY_FS=|^# CONFIG_OVERLAY_FS |^CONFIG_VETH=|^# CONFIG_VETH |^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE |^CONFIG_NF_NAT_IPV4=|^# CONFIG_NF_NAT_IPV4 |^CONFIG_NF_NAT_NEEDED=|^# CONFIG_NF_NAT_NEEDED |^CONFIG_NF_NAT_MASQUERADE_IPV4=|^# CONFIG_NF_NAT_MASQUERADE_IPV4 |^CONFIG_NFT_MASQ_IPV4=|^# CONFIG_NFT_MASQ_IPV4 |^CONFIG_NF_TABLES_COMPAT=|^# CONFIG_NF_TABLES_COMPAT ' .config || echo "关键Docker网络配置状态未找到或状态未知"
          echo "---------------------------------------"

          echo "--- Setting Kernel Version Suffix (CONFIG_LOCALVERSION) ---"
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-${{ matrix.arch }}"
          LOCAL_VERSION_SUFFIX=$(echo "${LOCAL_VERSION_SUFFIX}" | head -c 64)
          echo "Setting CONFIG_LOCALVERSION=${LOCAL_VERSION_SUFFIX}"
          sed -i "s/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=\"${LOCAL_VERSION_SUFFIX}\"/" .config

          echo "--- Finalizing Configuration with Local Version (olddefconfig) ---"
          make olddefconfig

          # *** 调试步骤 3: 检查 最终 olddefconfig 之后 的配置 (更新grep) ***
          echo "--- Config AFTER final olddefconfig ---"
          echo "Checking critical Docker network options:"
          grep -E '^CONFIG_BRIDGE=|^# CONFIG_BRIDGE |^CONFIG_BRIDGE_NETFILTER=|^# CONFIG_BRIDGE_NETFILTER |^CONFIG_OVERLAY_FS=|^# CONFIG_OVERLAY_FS |^CONFIG_VETH=|^# CONFIG_VETH |^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE |^CONFIG_NF_NAT_IPV4=|^# CONFIG_NF_NAT_IPV4 |^CONFIG_NF_NAT_NEEDED=|^# CONFIG_NF_NAT_NEEDED |^CONFIG_NF_NAT_MASQUERADE_IPV4=|^# CONFIG_NF_NAT_MASQUERADE_IPV4 |^CONFIG_NFT_MASQ_IPV4=|^# CONFIG_NFT_MASQ_IPV4 |^CONFIG_NF_TABLES_COMPAT=|^# CONFIG_NF_TABLES_COMPAT ' .config || echo "关键Docker网络配置状态未找到或状态未知"
          echo "-------------------------------------"


          echo "--- Configuration Complete ---"

      # Build Kernel and Modules step remains the same
      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      # Prepare Kernel Package step remains the same
      - name: Prepare Kernel Package for Manual Install
        run: |
          echo "--- Determining Full Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "Full Kernel Version Suffix: ${KERNEL_SUFFIX}"
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=$(pwd)/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Verifying Module Directory Existence ---"
          if [ ! -d "${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}" ]; then
            echo "ERROR: Module directory ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX} was not created!"
            ls -l ${INSTALL_PATH}/lib/modules/
            exit 1
          fi
          echo "Module directory found: ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}"

          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents (Staging) ---"
          ls -lR ${INSTALL_PATH}/

          echo "--- Creating Tarball ---"
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      # Upload Artifact step remains the same
      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90