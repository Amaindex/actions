name: Build Kernel for Debian 11 VM (Using Official 6.1 Base + Check Script)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax from amaindex/linux)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''
      # No Debian package parameters needed anymore

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          # fetch-depth: 0 # Consider full clone if needed

      - name: Install Build Dependencies and Debian Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync \
                                  git \
                                  wget dpkg bash # Need bash for the check script

      - name: Configure Kernel using Official Debian 6.1 Base Config
        run: |
          echo "--- Creating Minimal Custom Fragments ---"

          # --- Tailscale Support Fragment (Keep if needed) ---
          cat <<EOF > tailscale.config
          CONFIG_TUN=m
          CONFIG_VXLAN=m
          EOF

          # --- Debug Fragment ---
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y
          CONFIG_IKCONFIG_PROC=y
          EOF

          # --- Disable Unnecessary Fragment ---
          cat <<EOF > disable.config
          # CONFIG_DRM is not set
          # CONFIG_SND is not set
          # CONFIG_SOUND is not set
          # CONFIG_USB_COMMON is not set
          # CONFIG_HID is not set
          # CONFIG_CFG80211 is not set
          # CONFIG_TIGON3 is not set
          # CONFIG_E100 is not set
          # CONFIG_E1000E is not set
          # CONFIG_R8169 is not set
          # CONFIG_BNX2 is not set
          EOF

          # --- Fetch and Extract Official Debian 6.1 Kernel Config (Latest from oldstable-security) ---
          DEB_PKG_NAME="linux-image-6.1.0-0.deb11.32-amd64"
          DEB_PKG_VERSION="6.1.129-1~deb11u1" # Version corresponding to the package name
          DEB_ARCH="${{ matrix.arch }}"
          # Use security repo as primary source for security-updated packages
          DEB_REPO_URL_PRIMARY="http://security.debian.org/debian-security"
          DEB_URL_PRIMARY="${DEB_REPO_URL_PRIMARY}/pool/updates/main/l/linux/${DEB_PKG_NAME}_${DEB_PKG_VERSION}_${DEB_ARCH}.deb"
          # Fallback to main repo just in case
          DEB_REPO_URL_FALLBACK="http://deb.debian.org/debian"
          DEB_URL_FALLBACK="${DEB_REPO_URL_FALLBACK}/pool/main/l/linux/${DEB_PKG_NAME}_${DEB_PKG_VERSION}_${DEB_ARCH}.deb"


          echo "Attempting to download Debian 6.1 kernel package..."
          echo "Primary URL: ${DEB_URL_PRIMARY}"
          echo "Fallback URL: ${DEB_URL_FALLBACK}"

          wget -T 30 -O kernel_pkg.deb "${DEB_URL_PRIMARY}" || {
            echo "WARNING: Failed to download from primary security URL. Trying fallback URL...";
            wget -T 30 -O kernel_pkg.deb "${DEB_URL_FALLBACK}" || {
              echo "ERROR: Failed to download Debian package ${DEB_PKG_NAME}_${DEB_PKG_VERSION}_${DEB_ARCH}.deb from both URLs. Check package name/version.";
              exit 1;
            }
          }

          echo "Extracting Debian kernel config..."
          mkdir -p ./deb_extract/boot
          dpkg -x kernel_pkg.deb ./deb_extract
          OFFICIAL_CONFIG_FILE=$(find ./deb_extract/boot/ -name 'config-*' | head -n 1)

          if [ -z "${OFFICIAL_CONFIG_FILE}" ] || [ ! -f "${OFFICIAL_CONFIG_FILE}" ]; then
            echo "ERROR: Could not find config file in downloaded Debian package!"
            ls -lR ./deb_extract # Show extracted content for debugging
            exit 1
          fi
          echo "Found official Debian 6.1 config file: ${OFFICIAL_CONFIG_FILE}"
          # Copy the official config as our base .config
          cp "${OFFICIAL_CONFIG_FILE}" .config
          rm -rf ./deb_extract kernel_pkg.deb # Clean up

          echo "--- Base .config is now from official Debian 6.1 (bullseye-security) package ---"
          ls -l .config

          # *** IMPORTANT: DO NOT run make defconfig here ***

          echo "--- Merging MINIMAL Custom Configuration Fragments ---"
          # Merge only essential, non-conflicting fragments
          ./scripts/kconfig/merge_config.sh -m .config \
              tailscale.config \
              debug.config \
              disable.config
          # *** DO NOT MERGE any docker_*.config or base_server.config ***

          echo "--- Applying Merged Configuration (olddefconfig) ---"
          # Adapt the official 6.1 config to the specific kernel source version (your 6.x)
          make olddefconfig

          echo "--- Setting Kernel Version Suffix (CONFIG_LOCALVERSION) ---"
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          # Append -deb11-6.1-base indicator
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-deb11-6.1-base-${{ matrix.arch }}"
          LOCAL_VERSION_SUFFIX=$(echo "${LOCAL_VERSION_SUFFIX}" | head -c 64)
          echo "Setting CONFIG_LOCALVERSION=${LOCAL_VERSION_SUFFIX}"
          ./scripts/config --set-str LOCALVERSION "${LOCAL_VERSION_SUFFIX}"

          echo "--- Finalizing Configuration with Local Version (olddefconfig) ---"
          make olddefconfig

          echo "--- Final .config generated ---"
          ls -l .config

      # *** Check final config using check-config.sh ***
      - name: Check Kernel Config for Docker Compatibility
        run: |
          echo "--- Downloading check-config.sh ---"
          wget -O check-config.sh https://raw.githubusercontent.com/moby/moby/master/contrib/check-config.sh
          chmod +x check-config.sh

          echo "--- Running check-config.sh ---"
          CHECK_OUTPUT=$(./check-config.sh .config)
          echo "${CHECK_OUTPUT}" # Print the full output

          echo "--- Analyzing check-config.sh Results ---"
          GENERALLY_NECESSARY_OUTPUT=$(echo "${CHECK_OUTPUT}" | awk '/Generally Necessary:/{flag=1; next} /Optional Features:/{flag=0} flag')
          if echo "${GENERALLY_NECESSARY_OUTPUT}" | grep -E -i '(missing|disabled)'; then
             echo "ERROR: check-config.sh reported missing or disabled generally necessary options!"
             echo "--- Failing Necessary Section ---"
             echo "${GENERALLY_NECESSARY_OUTPUT}" | grep -E -i '(missing|disabled)'
             echo "---------------------------------"
             exit 1
          else
             echo "OK: All generally necessary options seem to be enabled."
          fi
          echo "--- Configuration Check Complete ---"


      # Build Kernel and Modules step remains the same
      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      # Prepare Kernel Package step remains the same
      - name: Prepare Kernel Package for Manual Install
        run: |
          echo "--- Determining Full Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "Full Kernel Version Suffix: ${KERNEL_SUFFIX}"
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=$(pwd)/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Verifying Module Directory Existence ---"
          if [ ! -d "${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}" ]; then
            echo "ERROR: Module directory ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX} was not created!"
            ls -l ${INSTALL_PATH}/lib/modules/
            exit 1
          fi
          echo "Module directory found: ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}"

          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents (Staging) ---"
          ls -lR ${INSTALL_PATH}/

          echo "--- Creating Tarball ---"
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      # Upload Artifact step remains the same
      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90