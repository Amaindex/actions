name: Build Kernel for PVE/QEMU VM (Debug Config Step v2)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64] # Assuming x86_64 build

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync \
                                  git

      - name: Configure Kernel using Fragments
        run: |
          echo "--- Creating Configuration Fragments ---"

          # --- Base Server Fragment (保持之前的修正) ---
          cat <<EOF > base_server.config
          # Core Boot Requirements (Built-in where critical)
          CONFIG_NET=y                    # Core networking infrastructure
          CONFIG_MODULES=y
          CONFIG_BLOCK=y
          CONFIG_BLK_DEV_SD=y
          CONFIG_SCSI=y
          CONFIG_VIRTIO_PCI=y
          CONFIG_VIRTIO_SCSI=y
          CONFIG_VIRTIO_BLK=y
          CONFIG_EXT4_FS=y
          CONFIG_VFAT_FS=y
          CONFIG_NLS=y                    # Dependency for VFAT, etc.
          CONFIG_PARTITION_ADVANCED=y
          CONFIG_EFI_PARTITION=y
          CONFIG_MSDOS_PARTITION=y
          CONFIG_BLK_DEV_INITRD=y
          CONFIG_DEVTMPFS=y
          CONFIG_DEVTMPFS_MOUNT=y
          CONFIG_HW_RANDOM=y              # Dependency for HW_RANDOM_VIRTIO
          CONFIG_HW_RANDOM_VIRTIO=y
          CONFIG_TMPFS=y                  # Base for TMPFS features
          CONFIG_FS_POSIX_ACL=y           # Base for POSIX ACL support
          CONFIG_FS_XATTR=y               # Base for Extended Attributes
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_INET=y                   # Enable IPv4 networking core
          CONFIG_IPV6=y                   # Enable IPv6 networking core

          # Common Server Features (Modules where appropriate)
          CONFIG_VIRTIO_NET=m
          CONFIG_VIRTIO_BALLOON=m
          CONFIG_VIRTIO_CONSOLE=m
          CONFIG_VIRTIO_INPUT=m
          # CONFIG_VIRTIO_GPU=m
          CONFIG_BLK_DEV_LOOP=m
          CONFIG_BLK_DEV_NVME=m
          CONFIG_BLK_DEV_DM=m
          CONFIG_BLK_DEV_MD=m
          CONFIG_BTRFS_FS=m
          CONFIG_XFS_FS=m
          CONFIG_NFS_FS=m
          CONFIG_NFSD=m
          CONFIG_ISO9660_FS=m
          CONFIG_BRIDGE=y                 # Bridge support itself, built-in
          CONFIG_VLAN_8021Q=y             # VLAN support, built-in (for Bridge VLAN Filtering=y)
          CONFIG_AHCI=m
          CONFIG_ATA_PIIX=m
          CONFIG_SCSI_SAS_LIBSAS=m
          CONFIG_ISCSI_TCP=m
          CONFIG_DM_CRYPT=m
          CONFIG_CRYPTO_CBC=y
          CONFIG_CRYPTO_XTS=y
          CONFIG_CRYPTO_AES_X86_64=m
          EOF

          # --- Docker Support Fragment (修正IPVS语法, 添加NF_DEFRAG_IPV4) ---
          cat <<EOF > docker.config
          # Filesystems & Core Features
          CONFIG_OVERLAY_FS=y
          CONFIG_NAMESPACES=y
          CONFIG_UTS_NS=y
          CONFIG_IPC_NS=y
          CONFIG_USER_NS=y
          CONFIG_PID_NS=y
          CONFIG_NET_NS=y

          # CGroups
          CONFIG_CGROUPS=y
          CONFIG_CGROUP_CPUACCT=y
          CONFIG_CGROUP_DEVICE=y
          CONFIG_CGROUP_FREEZER=y
          CONFIG_CGROUP_NET_PRIO=y
          CONFIG_CGROUP_PERF=y
          CONFIG_CGROUP_SCHED=y
          CONFIG_CPUSETS=y
          CONFIG_MEMCG=y
          CONFIG_CGROUP_PIDS=y
          CONFIG_CGROUP_BPF=y

          # Security
          CONFIG_SECURITY=y               # Base for security features
          CONFIG_SECCOMP=y
          CONFIG_SECCOMP_FILTER=y
          CONFIG_SECURITY_APPARMOR=m
          CONFIG_SECURITY_SELINUX=m
          CONFIG_KEYS=y
          CONFIG_EXT4_FS_POSIX_ACL=y
          CONFIG_EXT4_FS_SECURITY=y
          CONFIG_POSIX_MQUEUE=y

          # --- Networking ---
          CONFIG_NETFILTER=y              # Core Netfilter (dependency)
          CONFIG_NF_DEFRAG_IPV4=y         # *** FIX: Add likely missing dependency for BRIDGE_NETFILTER ***
          CONFIG_BRIDGE_NETFILTER=y       # The target setting
          CONFIG_BRIDGE_VLAN_FILTERING=y

          # Core NAT Framework
          CONFIG_NF_NAT=y

          # iptables Backend Support
          CONFIG_NETFILTER_XTABLES=y
          CONFIG_IP_NF_IPTABLES=y
          CONFIG_IP_NF_FILTER=y
          CONFIG_IP_NF_NAT=y
          CONFIG_IP_NF_MANGLE=y
          CONFIG_IP_NF_RAW=m
          CONFIG_IP_NF_TARGET_MASQUERADE=y
          CONFIG_IP_NF_TARGET_REDIRECT=m
          CONFIG_IP6_NF_IPTABLES=y
          CONFIG_IP6_NF_FILTER=m
          CONFIG_IP6_NF_MANGLE=m
          CONFIG_IP6_NF_RAW=m
          CONFIG_IP6_NF_NAT=m
          CONFIG_IP6_NF_TARGET_MASQUERADE=m

          # nf_tables Backend Support
          CONFIG_NF_TABLES=y
          CONFIG_NF_TABLES_IPV4=y
          CONFIG_NF_TABLES_IPV6=y
          CONFIG_NFT_CT=y
          CONFIG_NFT_CHAIN_NAT=y
          CONFIG_NF_NAT_IPV4=y
          CONFIG_NF_NAT_IPV6=y
          CONFIG_NFT_MASQ=y
          CONFIG_NFT_MASQ_IPV4=y
          CONFIG_NFT_MASQ_IPV6=y
          CONFIG_NFT_FIB_INET=y

          # Netfilter Conntrack
          CONFIG_NF_CONNTRACK=y
          CONFIG_NF_CONNTRACK_IPV4=y
          CONFIG_NF_CONNTRACK_IPV6=y

          # Netfilter Matches & Helpers
          CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
          CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
          CONFIG_NETFILTER_XT_MATCH_IPVS=m
          CONFIG_NETFILTER_XT_MARK=m
          CONFIG_NF_NAT_FTP=m
          CONFIG_NF_CONNTRACK_FTP=m
          CONFIG_NF_NAT_TFTP=m
          CONFIG_NF_CONNTRACK_TFTP=m

          # Networking (Virtual Devices)
          CONFIG_VETH=m
          CONFIG_IPVLAN=m
          CONFIG_MACVLAN=m
          CONFIG_DUMMY=m

          # IPVS (Optional, keep dependencies consistent as modules, fixed syntax)
          CONFIG_IP_VS=m
          CONFIG_IP_VS_NFCT=m
          CONFIG_IP_VS_PROTO_TCP=m
          CONFIG_IP_VS_PROTO_UDP=m
          CONFIG_IP_VS_RR=m
          EOF

          # --- Tailscale Support Fragment ---
          cat <<EOF > tailscale.config
          CONFIG_TUN=m                  # TUN device support
          # INET, IPV6, Netfilter/NAT/NFtables covered in base/docker configs

          # Other Networking Features
          CONFIG_VXLAN=m
          EOF

          # --- Debug Fragment (Added IKCONFIG) ---
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y             # Enable kernel config access via /proc/config.gz
          CONFIG_IKCONFIG_PROC=y        # Provide kernel config via /proc/config.gz
          EOF

          # --- Disable Unnecessary Fragment ---
          cat <<EOF > disable.config
          # CONFIG_DRM is not set
          # CONFIG_SND is not set
          # CONFIG_SOUND is not set
          # CONFIG_USB_COMMON is not set
          # CONFIG_HID is not set
          # CONFIG_CFG80211 is not set
          # CONFIG_TIGON3 is not set
          # CONFIG_E100 is not set
          # CONFIG_E1000E is not set
          # CONFIG_R8169 is not set
          # CONFIG_BNX2 is not set
          EOF

          echo "--- Starting Base Configuration (defconfig) ---"
          make defconfig

          echo "--- Merging Custom Configuration Fragments ---"
          ./scripts/kconfig/merge_config.sh -m .config \
              base_server.config \
              docker.config \
              tailscale.config \
              debug.config \
              disable.config

          # *** 调试步骤 1: 检查 合并后、第一个 olddefconfig 之前 的配置 ***
          echo "--- Config AFTER merge, BEFORE olddefconfig ---"
          grep -E 'CONFIG_BRIDGE=y|CONFIG_BRIDGE_NETFILTER=' .config || echo "合并后未找到该值"
          echo "---------------------------------------------"

          echo "--- Applying Merged Configuration (olddefconfig) ---"
          make olddefconfig

          # *** 调试步骤 2: 检查 第一个 olddefconfig 之后 的配置 ***
          echo "--- Config AFTER first olddefconfig ---"
          grep -E 'CONFIG_BRIDGE=y|CONFIG_BRIDGE_NETFILTER=' .config || echo "第一次 olddefconfig 后未找到该值"
          echo "---------------------------------------"

          echo "--- Setting Kernel Version Suffix (CONFIG_LOCALVERSION) ---"
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-${{ matrix.arch }}"
          LOCAL_VERSION_SUFFIX=$(echo "${LOCAL_VERSION_SUFFIX}" | head -c 64)
          echo "Setting CONFIG_LOCALVERSION=${LOCAL_VERSION_SUFFIX}"
          sed -i "s/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=\"${LOCAL_VERSION_SUFFIX}\"/" .config

          echo "--- Finalizing Configuration with Local Version (olddefconfig) ---"
          make olddefconfig

          # *** 调试步骤 3: 检查 最终 olddefconfig 之后 的配置 (这就是用来编译的配置) ***
          echo "--- Config AFTER final olddefconfig ---"
          grep -E 'CONFIG_BRIDGE=y|CONFIG_BRIDGE_NETFILTER=' .config || echo "最终 olddefconfig 后未找到该值"
          echo "-------------------------------------"


          echo "--- Configuration Complete ---"

      # Build Kernel and Modules step remains the same
      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      # Prepare Kernel Package step remains the same
      - name: Prepare Kernel Package for Manual Install
        run: |
          echo "--- Determining Full Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "Full Kernel Version Suffix: ${KERNEL_SUFFIX}"
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=$(pwd)/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Verifying Module Directory Existence ---"
          if [ ! -d "${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}" ]; then
            echo "ERROR: Module directory ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX} was not created!"
            ls -l ${INSTALL_PATH}/lib/modules/
            exit 1
          fi
          echo "Module directory found: ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}"

          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents (Staging) ---"
          ls -lR ${INSTALL_PATH}/

          echo "--- Creating Tarball ---"
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      # Upload Artifact step remains the same
      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90