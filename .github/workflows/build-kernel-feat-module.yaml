name: Build Kernel for PVE/QEMU VM (Fragment Based)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64] # Assuming x86_64 build

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync \
                                  git

      - name: Configure Kernel using Fragments
        run: |
          echo "--- Creating Configuration Fragments ---"

          # --- Base Server Fragment (Core Boot + Common Server Needs for PVE/QEMU) ---
          cat <<EOF > base_server.config
          # Core Boot Requirements (Built-in where critical)
          CONFIG_MODULES=y
          CONFIG_BLOCK=y
          CONFIG_BLK_DEV_SD=y
          CONFIG_SCSI=y
          CONFIG_VIRTIO_PCI=y           # Essential for QEMU device detection
          CONFIG_VIRTIO_SCSI=y          # Common VirtIO storage controller
          CONFIG_VIRTIO_BLK=y           # Alternative VirtIO storage (if used)
          CONFIG_EXT4_FS=y
          CONFIG_VFAT_FS=y              # Needed for EFI System Partition
          CONFIG_PARTITION_ADVANCED=y
          CONFIG_EFI_PARTITION=y
          CONFIG_MSDOS_PARTITION=y
          CONFIG_BLK_DEV_INITRD=y
          CONFIG_DEVTMPFS=y
          CONFIG_DEVTMPFS_MOUNT=y
          CONFIG_HW_RANDOM_VIRTIO=y     # Use host entropy via VirtIO

          # Common Server Features (Modules where appropriate)
          CONFIG_VIRTIO_NET=m           # VirtIO Network driver
          CONFIG_VIRTIO_BALLOON=m       # VirtIO Memory Ballooning
          CONFIG_VIRTIO_CONSOLE=m       # VirtIO Console
          CONFIG_VIRTIO_INPUT=m         # VirtIO Input devices (mouse, keyboard)
          # CONFIG_VIRTIO_GPU=m         # VirtIO GPU (Enable if graphical console needed)
          CONFIG_BLK_DEV_LOOP=m
          CONFIG_BLK_DEV_NVME=m         # Support NVMe passthrough if used
          CONFIG_BLK_DEV_DM=m
          CONFIG_BLK_DEV_MD=m
          CONFIG_BTRFS_FS=m
          CONFIG_XFS_FS=m
          CONFIG_NFS_FS=m
          CONFIG_NFSD=m
          CONFIG_ISO9660_FS=m
          CONFIG_BRIDGE=m
          CONFIG_VLAN_8021Q=m
          CONFIG_AHCI=m                 # Support SATA passthrough if used
          CONFIG_ATA_PIIX=m             # Legacy IDE support (less common now)
          CONFIG_SCSI_SAS_LIBSAS=m      # Support SAS passthrough if used
          CONFIG_ISCSI_TCP=m
          CONFIG_DM_CRYPT=m
          CONFIG_CRYPTO_CBC=y
          CONFIG_CRYPTO_XTS=y
          CONFIG_CRYPTO_AES_X86_64=m
          CONFIG_TMPFS_POSIX_ACL=y      # Useful for permissions in tmpfs
          CONFIG_TMPFS_XATTR=y          # Useful for extended attributes in tmpfs
          EOF

          # --- Docker Support Fragment ---
          # Based on general Docker requirements. No official downloadable fragment exists.
          # Refer to Docker docs or check-config.sh script for details.
          cat <<EOF > docker.config
          # Filesystems & Core Features
          CONFIG_OVERLAY_FS=y
          CONFIG_NAMESPACES=y
          CONFIG_UTS_NS=y
          CONFIG_IPC_NS=y
          CONFIG_USER_NS=y
          CONFIG_PID_NS=y
          CONFIG_NET_NS=y

          # CGroups (v1 and v2 essentials)
          CONFIG_CGROUPS=y
          CONFIG_CGROUP_CPUACCT=y
          CONFIG_CGROUP_DEVICE=y
          CONFIG_CGROUP_FREEZER=y
          CONFIG_CGROUP_NET_PRIO=y
          CONFIG_CGROUP_PERF=y
          CONFIG_CGROUP_SCHED=y
          CONFIG_CPUSETS=y
          CONFIG_MEMCG=y
          CONFIG_CGROUP_PIDS=y
          CONFIG_CGROUP_BPF=y

          # Security
          CONFIG_SECCOMP=y
          CONFIG_SECCOMP_FILTER=y
          CONFIG_SECURITY_APPARMOR=m
          CONFIG_SECURITY_SELINUX=m
          CONFIG_KEYS=y
          CONFIG_EXT4_FS_POSIX_ACL=y
          CONFIG_EXT4_FS_SECURITY=y
          CONFIG_POSIX_MQUEUE=y

          # Networking (Core)
          CONFIG_NETFILTER=y
          CONFIG_NETFILTER_XTABLES=y
          CONFIG_BRIDGE_VLAN_FILTERING=y
          CONFIG_BR_NETFILTER=y

          # Networking (iptables backend)
          CONFIG_IP_NF_IPTABLES=y
          CONFIG_IP_NF_FILTER=y
          CONFIG_IP_NF_NAT=y
          CONFIG_IP_NF_MANGLE=y
          CONFIG_IP_NF_RAW=m
          CONFIG_IP_NF_TARGET_MASQUERADE=y
          CONFIG_IP_NF_TARGET_REDIRECT=m
          CONFIG_IP6_NF_IPTABLES=y
          CONFIG_IP6_NF_FILTER=m
          CONFIG_IP6_NF_MANGLE=m
          CONFIG_IP6_NF_RAW=m
          CONFIG_IP6_NF_NAT=m
          CONFIG_IP6_NF_TARGET_MASQUERADE=m

          # Networking (Netfilter Matches & Helpers)
          CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
          CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
          CONFIG_NETFILTER_XT_MATCH_IPVS=m
          CONFIG_NETFILTER_XT_MARK=m
          CONFIG_NF_NAT=y
          CONFIG_NF_NAT_MASQUERADE=y
          CONFIG_NF_NAT_FTP=m
          CONFIG_NF_CONNTRACK_FTP=m
          CONFIG_NF_NAT_TFTP=m
          CONFIG_NF_CONNTRACK_TFTP=m

          # Networking (Virtual Devices)
          CONFIG_VETH=m
          CONFIG_IPVLAN=m
          CONFIG_MACVLAN=m
          CONFIG_DUMMY=m

          # IPVS (Optional, for Kubernetes)
          CONFIG_IP_VS=m
          CONFIG_IP_VS_NFCT=y
          CONFIG_IP_VS_PROTO_TCP=y
          CONFIG_IP_VS_PROTO_UDP=y
          CONFIG_IP_VS_RR=m
          EOF

          # --- Tailscale Support Fragment ---
          cat <<EOF > tailscale.config
          CONFIG_TUN=m
          CONFIG_INET=y
          CONFIG_IPV6=y

          # Netfilter Core & Conntrack
          CONFIG_NETFILTER=y
          CONFIG_NF_CONNTRACK=y
          CONFIG_NF_CONNTRACK_IPV4=y
          CONFIG_NF_CONNTRACK_IPV6=y
          CONFIG_NF_NAT=y
          CONFIG_NF_NAT_MASQUERADE=y

          # NFtables
          CONFIG_NF_TABLES=y
          CONFIG_NF_TABLES_IPV4=y
          CONFIG_NF_TABLES_IPV6=y
          CONFIG_NFT_CT=y
          CONFIG_NFT_CHAIN_NAT=y
          CONFIG_NF_NAT_IPV4=y
          CONFIG_NF_NAT_IPV6=y
          CONFIG_NFT_MASQ=y
          CONFIG_NFT_MASQ_IPV4=y
          CONFIG_NFT_MASQ_IPV6=y
          CONFIG_NFT_FIB_INET=y

          # IPTables (Fallback)
          CONFIG_IP_TABLES=y
          CONFIG_IP6_TABLES=y

          # Other Networking Features
          CONFIG_VXLAN=m
          EOF

          # --- Debug Fragment (No KVM Host support) ---
          # Enable if extensive debugging/tracing is needed
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y           # Consider DEBUG_INFO_REDUCED if size is critical
          # CONFIG_DEBUG_INFO_DWARF4=y  # Alternative DWARF version
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y                 # Kernel Debugger support (requires serial/net console setup)
          CONFIG_MAGIC_SYSRQ=y          # Useful for debugging hangs
          EOF

          # --- Disable Unnecessary Fragment ---
          # Especially useful in VMs to reduce size/attack surface
          cat <<EOF > disable.config
          # CONFIG_DRM is not set         # Disable Direct Rendering Manager (GPU)
          # CONFIG_SND is not set         # Disable Sound subsystem
          # CONFIG_SOUND is not set
          # CONFIG_USB_COMMON is not set  # Disable Core USB (unless USB passthrough is used)
          # CONFIG_HID is not set         # Disable Human Interface Devices (if VIRTIO_INPUT suffices)
          # CONFIG_CFG80211 is not set    # Disable Wireless LAN
          # Disable specific NIC drivers if VirtIO is always used
          # CONFIG_TIGON3 is not set
          # CONFIG_E100 is not set
          # CONFIG_E1000E is not set      # Common Intel NIC, disable if not passed through
          # CONFIG_R8169 is not set       # Common Realtek NIC, disable if not passed through
          # CONFIG_BNX2 is not set
          # CONFIG_INPUT_EVDEV=m          # Often needed, maybe keep as module unless sure
          EOF

          echo "--- Starting Base Configuration (defconfig) ---"
          make defconfig

          echo "--- Merging Custom Configuration Fragments ---"
          ./scripts/kconfig/merge_config.sh -m .config \
              base_server.config \
              docker.config \
              tailscale.config \
              debug.config \
              disable.config
          # Note: wsl2.config is removed

          echo "--- Applying Merged Configuration (olddefconfig) ---"
          make olddefconfig

          echo "--- Setting Kernel Version Suffix (CONFIG_LOCALVERSION) ---"
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-${{ matrix.arch }}"
          LOCAL_VERSION_SUFFIX=$(echo "${LOCAL_VERSION_SUFFIX}" | head -c 64)
          echo "Setting CONFIG_LOCALVERSION=${LOCAL_VERSION_SUFFIX}"
          sed -i "s/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=\"${LOCAL_VERSION_SUFFIX}\"/" .config

          echo "--- Finalizing Configuration with Local Version (olddefconfig) ---"
          make olddefconfig

          echo "--- Configuration Complete ---"

      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      - name: Prepare Kernel Package for Manual Install
        run: |
          echo "--- Determining Full Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "Full Kernel Version Suffix: ${KERNEL_SUFFIX}"
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=$(pwd)/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Verifying Module Directory Existence ---"
          if [ ! -d "${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}" ]; then
            echo "ERROR: Module directory ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX} was not created!"
            ls -l ${INSTALL_PATH}/lib/modules/ # Show what is there, if anything
            exit 1
          fi
          echo "Module directory found: ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}"

          # Remove build/source symlinks
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents (Staging) ---"
          ls -lR ${INSTALL_PATH}/

          echo "--- Creating Tarball ---"
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90