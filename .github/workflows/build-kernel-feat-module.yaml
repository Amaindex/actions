name: Build Kernel for PVE/QEMU VM (Final - Clean defconfig before merge)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64] # Assuming x86_64 build

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync \
                                  git

      - name: Configure Kernel using Fragments
        run: |
          echo "--- Creating Configuration Fragments ---"

          # --- Base Server Fragment (Minimal) ---
          # (保持不变)
          cat <<EOF > base_server.config
          CONFIG_MODULES=y
          CONFIG_BLOCK=y
          CONFIG_BLK_DEV_SD=y
          CONFIG_SCSI=y
          CONFIG_VIRTIO_PCI=y
          CONFIG_VIRTIO_BLK=y
          CONFIG_EXT4_FS=y
          CONFIG_VFAT_FS=y
          CONFIG_NLS=y
          CONFIG_PARTITION_ADVANCED=y
          CONFIG_EFI_PARTITION=y
          CONFIG_MSDOS_PARTITION=y
          CONFIG_BLK_DEV_INITRD=y
          CONFIG_DEVTMPFS=y
          CONFIG_DEVTMPFS_MOUNT=y
          CONFIG_HW_RANDOM_VIRTIO=y
          CONFIG_TMPFS=y
          EOF

          # --- Docker Config Fragment (Force NFTables, Disable Legacy IPv4 NAT) ---
          # (保持上次的最终版本不变)
          cat <<EOF > docker_config.config
          # Base Requirements (Namespaces, CGroups, etc.) - Copied from previous working base
          CONFIG_OVERLAY_FS=y
          CONFIG_NAMESPACES=y
          CONFIG_NET_NS=y
          CONFIG_PID_NS=y
          CONFIG_IPC_NS=y
          CONFIG_UTS_NS=y
          CONFIG_USER_NS=y # Needed for rootless docker, good practice
          CONFIG_CGROUPS=y
          CONFIG_CGROUP_CPUACCT=y
          CONFIG_CGROUP_DEVICE=y
          CONFIG_CGROUP_FREEZER=y
          CONFIG_CGROUP_SCHED=y
          CONFIG_CGROUP_PIDS=y
          CONFIG_CGROUP_NET_PRIO=y # From Kconfig reference
          CONFIG_CGROUP_NET_CLASSID=y # From Kconfig reference
          CONFIG_CGROUP_PERF=y # Often useful with cgroups
          CONFIG_CPUSETS=y
          CONFIG_MEMCG=y
          CONFIG_MEMCG_KMEM=y # Account kernel memory
          CONFIG_KEYS=y
          CONFIG_PERSISTENT_KEYRINGS=y # Often needed by keys/security
          CONFIG_SECURITY=y
          CONFIG_SECCOMP=y
          CONFIG_SECCOMP_FILTER=y
          CONFIG_POSIX_MQUEUE=y
          CONFIG_PROC_PID_CPUSET=y # From Kconfig reference

          # Core Networking
          CONFIG_NET=y
          CONFIG_INET=y
          CONFIG_IPV6=y
          CONFIG_NETDEVICES=y
          CONFIG_NET_CORE=y
          CONFIG_NET_L3_MASTER_DEV=y # For bridge, vlan etc.

          # Bridge Support
          CONFIG_BRIDGE=y
          CONFIG_BRIDGE_NETFILTER=y       # Allow netfilter on bridge

          # Netfilter Base & Advanced
          CONFIG_NETFILTER=y
          CONFIG_NETFILTER_ADVANCED=y     # Needed for many features

          # Netfilter Conntrack
          CONFIG_NF_CONNTRACK=y
          CONFIG_NF_CONNTRACK_IPV4=y      # Needed by NF_NAT_IPV4
          CONFIG_NF_CONNTRACK_IPV6=y

          # Core NAT Framework (Base for NFTables NAT)
          CONFIG_NF_NAT=y
          CONFIG_NF_NAT_NEEDED=y          # Auto-select NAT helpers

          # --- Force Disable Legacy IPTables IPv4 NAT ---
          CONFIG_NETFILTER_XTABLES=y      # Keep base Xtables for matches/targets modules
          # CONFIG_IP_NF_IPTABLES is not set  # Disable legacy iptables tables
          # CONFIG_IP_NF_FILTER is not set
          # CONFIG_IP_NF_NAT is not set       # Disable legacy iptables NAT engine
          # CONFIG_IP_NF_MANGLE is not set
          # CONFIG_IP_NF_RAW is not set
          # CONFIG_IP_NF_TARGET_MASQUERADE is not set # Disable legacy MASQUERADE target
          # CONFIG_IP_NF_TARGET_REDIRECT is not set
          # Keep IPv6 legacy tables if needed, or disable them too for consistency
          # CONFIG_IP6_NF_IPTABLES is not set
          # CONFIG_IP6_NF_FILTER is not set
          # CONFIG_IP6_NF_NAT is not set
          # CONFIG_IP6_NF_MANGLE is not set
          # CONFIG_IP6_NF_RAW is not set
          # CONFIG_IP6_NF_TARGET_MASQUERADE is not set

          # --- Force Enable Full NFTables Stack (Core, IPv4, NAT, MASQ, Compat) ---
          CONFIG_NF_TABLES=y              # Enable NFTables Core
          CONFIG_NF_TABLES_IPV4=y         # Enable NFTables IPv4 support
          CONFIG_NF_TABLES_IPV6=y         # Enable NFTables IPv6 support
          CONFIG_NF_NAT_IPV4=y            # Enable NFTables IPv4 NAT Engine <--- CRITICAL
          CONFIG_NF_NAT_IPV6=y            # Enable NFTables IPv6 NAT Engine
          CONFIG_NFT_CHAIN_NAT=y          # Support NAT chains in NFTables
          CONFIG_NFT_MASQ=y               # NFTables MASQUERADE base
          CONFIG_NFT_MASQ_IPV4=y          # Enable NFTables IPv4 MASQUERADE target <--- CRITICAL
          CONFIG_NFT_MASQ_IPV6=y          # Enable NFTables IPv6 MASQUERADE target
          CONFIG_NFT_REJECT_IPV4=y        # NFTables REJECT target for IPv4 (dependency?)
          CONFIG_NFT_REJECT_IPV6=y
          CONFIG_NFT_CT=y                 # NFTables conntrack support
          CONFIG_NFT_COMPAT=y             # Enable NFTables -> IPTables compatibility module <--- CRITICAL
          CONFIG_NF_TABLES_COMPAT=y       # Enable NFTables compatibility hooks <--- CRITICAL

          # XTables Matches/Targets (Needed even with NFTables backend for some rules/features)
          CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
          CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
          CONFIG_NETFILTER_XT_MATCH_COMMENT=y # Often used by docker/kube
          CONFIG_NETFILTER_XT_MATCH_MARK=y
          CONFIG_NETFILTER_XT_MARK=y # Target MARK

          # Virtual Devices
          CONFIG_VETH=m
          CONFIG_VXLAN=m
          CONFIG_IPVLAN=m
          CONFIG_MACVLAN=m
          CONFIG_DUMMY=m

          # Filesystem/Storage related (ensure these are covered)
          CONFIG_OVERLAY_FS=y
          CONFIG_BLK_DEV_DM=y             # Device Mapper base
          CONFIG_DM_THIN_PROVISIONING=y   # For devicemapper storage driver
          CONFIG_EXT4_FS_POSIX_ACL=y      # Needed by some storage drivers
          CONFIG_EXT4_FS_SECURITY=y       # Needed by some storage drivers

          # Other common Docker needs from Kconfig reference
          CONFIG_CGROUP_DEVICE=y
          CONFIG_CGROUP_FREEZER=y
          CONFIG_CPUSETS=y
          CONFIG_POSIX_MQUEUE=y
          CONFIG_USER_NS=y
          CONFIG_SECCOMP=y
          CONFIG_CGROUP_PIDS=y
          CONFIG_BLK_CGROUP=y             # For IO limits
          CONFIG_IOSCHED_CFQ=y            # Or BFQ/none if preferred
          CONFIG_CFS_BANDWIDTH=y          # CPU limits
          CONFIG_RT_GROUP_SCHED=y
          CONFIG_IP_VS=m
          CONFIG_IP_VS_PROTO_TCP=m
          CONFIG_IP_VS_PROTO_UDP=m
          CONFIG_IP_VS_NFCT=m
          CONFIG_DEVPTS_MULTIPLE_INSTANCES=y

          EOF

          # --- Tailscale Support Fragment (Minimal) ---
          cat <<EOF > tailscale.config
          CONFIG_TUN=m
          EOF

          # --- Debug Fragment ---
          # (保持不变)
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y
          CONFIG_IKCONFIG_PROC=y
          EOF

          # --- Disable Unnecessary Fragment ---
          # (保持不变)
          cat <<EOF > disable.config
          # CONFIG_DRM is not set
          # CONFIG_SND is not set
          # CONFIG_SOUND is not set
          # CONFIG_USB_COMMON is not set
          # CONFIG_HID is not set
          # CONFIG_CFG80211 is not set
          # CONFIG_TIGON3 is not set
          # CONFIG_E100 is not set
          # CONFIG_E1000E is not set
          # CONFIG_R8169 is not set
          # CONFIG_BNX2 is not set
          EOF

          echo "--- Starting Base Configuration (defconfig) ---"
          make defconfig

          # *** 新步骤: 清理 defconfig 中不想要的默认值 ***
          echo "--- Cleaning defconfig defaults before merge ---"
          sed -i \
            -e 's/^CONFIG_IP_NF_NAT=m/# CONFIG_IP_NF_NAT is not set (disabled before merge)/' \
            -e 's/^CONFIG_IP_NF_TARGET_MASQUERADE=m/# CONFIG_IP_NF_TARGET_MASQUERADE is not set (disabled before merge)/' \
            .config
          echo "--- Defconfig after cleaning ---"
          grep -E '^CONFIG_IP_NF_NAT=|^# CONFIG_IP_NF_NAT |^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE ' .config || echo "Legacy NAT options not found after cleaning"
          echo "------------------------------"

          echo "--- Merging Custom Configuration Fragments ---"
          ./scripts/kconfig/merge_config.sh -m .config \
              base_server.config \
              docker_config.config \
              tailscale.config \
              debug.config \
              disable.config

          # *** 调试步骤 1: 检查 合并后、第一个 olddefconfig 之前 的配置 ***
          echo "--- Config AFTER merge, BEFORE olddefconfig ---"
          echo "Checking critical Docker network options:"
          # Monitor NFTables stack and disabled legacy options
          grep -E '^CONFIG_IP_NF_NAT=|^# CONFIG_IP_NF_NAT is not set|^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE is not set|^CONFIG_NF_NAT_IPV4=|^# CONFIG_NF_NAT_IPV4 |^CONFIG_NFT_MASQ_IPV4=|^# CONFIG_NFT_MASQ_IPV4 |^CONFIG_NF_TABLES_COMPAT=|^# CONFIG_NF_TABLES_COMPAT |^CONFIG_NFT_COMPAT=|^# CONFIG_NFT_COMPAT ' .config || echo "关键Docker网络配置状态未找到或状态未知"
          echo "---------------------------------------------"

          echo "--- Applying Merged Configuration (olddefconfig) ---"
          make olddefconfig

          # *** 调试步骤 2: 检查 第一个 olddefconfig 之后 的配置 ***
          echo "--- Config AFTER first olddefconfig ---"
          echo "Checking critical Docker network options:"
          grep -E '^CONFIG_IP_NF_NAT=|^# CONFIG_IP_NF_NAT is not set|^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE is not set|^CONFIG_NF_NAT_IPV4=|^# CONFIG_NF_NAT_IPV4 |^CONFIG_NFT_MASQ_IPV4=|^# CONFIG_NFT_MASQ_IPV4 |^CONFIG_NF_TABLES_COMPAT=|^# CONFIG_NF_TABLES_COMPAT |^CONFIG_NFT_COMPAT=|^# CONFIG_NFT_COMPAT ' .config || echo "关键Docker网络配置状态未找到或状态未知"
          echo "---------------------------------------"

          echo "--- Setting Kernel Version Suffix (CONFIG_LOCALVERSION) ---"
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-${{ matrix.arch }}"
          LOCAL_VERSION_SUFFIX=$(echo "${LOCAL_VERSION_SUFFIX}" | head -c 64)
          echo "Setting CONFIG_LOCALVERSION=${LOCAL_VERSION_SUFFIX}"
          sed -i "s/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=\"${LOCAL_VERSION_SUFFIX}\"/" .config

          echo "--- Finalizing Configuration with Local Version (olddefconfig) ---"
          make olddefconfig

          # *** 调试步骤 3: 检查 最终 olddefconfig 之后 的配置 ***
          echo "--- Config AFTER final olddefconfig ---"
          echo "Checking critical Docker network options:"
          grep -E '^CONFIG_IP_NF_NAT=|^# CONFIG_IP_NF_NAT is not set|^CONFIG_IP_NF_TARGET_MASQUERADE=|^# CONFIG_IP_NF_TARGET_MASQUERADE is not set|^CONFIG_NF_NAT_IPV4=|^# CONFIG_NF_NAT_IPV4 |^CONFIG_NFT_MASQ_IPV4=|^# CONFIG_NFT_MASQ_IPV4 |^CONFIG_NF_TABLES_COMPAT=|^# CONFIG_NF_TABLES_COMPAT |^CONFIG_NFT_COMPAT=|^# CONFIG_NFT_COMPAT ' .config || echo "关键Docker网络配置状态未找到或状态未知"
          echo "-------------------------------------"


          echo "--- Configuration Complete ---"

      # Build Kernel and Modules step remains the same
      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      # Prepare Kernel Package step remains the same
      - name: Prepare Kernel Package for Manual Install
        run: |
          echo "--- Determining Full Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "Full Kernel Version Suffix: ${KERNEL_SUFFIX}"
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=$(pwd)/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Verifying Module Directory Existence ---"
          if [ ! -d "${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}" ]; then
            echo "ERROR: Module directory ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX} was not created!"
            ls -l ${INSTALL_PATH}/lib/modules/
            exit 1
          fi
          echo "Module directory found: ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}"

          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents (Staging) ---"
          ls -lR ${INSTALL_PATH}/

          echo "--- Creating Tarball ---"
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      # Upload Artifact step remains the same
      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90