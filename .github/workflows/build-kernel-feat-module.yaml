name: Build Kernel for VM (Using Local Config + Debug/Ftrace)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax from amaindex/linux)'
        required: true
        default: 'ax'
      config_name:
        description: 'Name of kernel config file in build-kernel/ directory'
        required: true
        default: 'config-6.12.24-0-virt-edited'

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]

    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4

      - name: Checkout Linux Repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          path: linux_source

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync

      - name: Configure Kernel
        working-directory: ./linux_source
        run: |
          echo "--- Using local config file ---"
          LOCAL_CONFIG_PATH="../build-kernel/${{ github.event.inputs.config_name }}"
          if [ ! -f "${LOCAL_CONFIG_PATH}" ]; then
            echo "ERROR: Config file not found at ${LOCAL_CONFIG_PATH}"
            exit 1
          fi
          cp "${LOCAL_CONFIG_PATH}" .config

          echo "--- Creating Debug/Ftrace Config Fragment ---"
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_DEBUG_INFO_BTF=y
          CONFIG_DEBUG_INFO_REDUCED=n
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y
          CONFIG_IKCONFIG_PROC=y
          CONFIG_KHEADERS=y
          CONFIG_BPF=y
          CONFIG_BPF_SYSCALL=y
          CONFIG_BPF_JIT=y
          EOF

          echo "--- Merging Configurations ---"
          ./scripts/kconfig/merge_config.sh -m .config debug.config

          echo "--- Ensuring Signature Options are Disabled ---"
          ./scripts/config --disable MODULE_SIG
          ./scripts/config --disable MODULE_SIG_ALL
          ./scripts/config --disable MODULE_SIG_FORCE
          ./scripts/config --set-str MODULE_SIG_KEY ""
          ./scripts/config --disable SYSTEM_TRUSTED_KEYRING
          ./scripts/config --set-str SYSTEM_TRUSTED_KEYS ""
          ./scripts/config --disable SYSTEM_REVOCATION_LIST
          ./scripts/config --set-str SYSTEM_REVOCATION_KEYS ""

          echo "--- Finalizing Configuration ---"
          make olddefconfig

          echo "--- Verifying Signature Options ---"
          grep -E 'CONFIG_MODULE_SIG|CONFIG_SYSTEM_TRUSTED_KEYRING|CONFIG_SYSTEM_TRUSTED_KEYS|CONFIG_SYSTEM_REVOCATION' .config || echo "No signature options found"

          echo "--- Ensuring No Local Version Suffix ---"
          ./scripts/config --set-str LOCALVERSION ""
          make olddefconfig

      - name: Build Kernel and Modules
        working-directory: ./linux_source
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      - name: Prepare Kernel Package
        working-directory: ./linux_source
        run: |
          echo "--- Determining Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=${GITHUB_WORKSPACE}/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules
          mkdir -p ${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_SUFFIX}

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Creating Extlinux Config Snippet ---"
          cat <<EOF > ${INSTALL_PATH}/boot/extlinux.conf.snippet
          DEFAULT virt
          LABEL virt
              LINUX vmlinuz-${KERNEL_SUFFIX}
              INITRD initramfs-virt
              APPEND root=/dev/vda1 console=ttyS0
          EOF

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Installing Kernel Headers ---"
          make headers_install INSTALL_HDR_PATH=${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_SUFFIX}

          echo "--- Creating build and source Symlinks ---"
          ln -sf ${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_SUFFIX} ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          ln -sf ${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_SUFFIX} ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Verifying Module Installation ---"
          ls -l ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}
          depmod -b ${INSTALL_PATH} -F System.map ${KERNEL_SUFFIX}

          echo "--- Creating Installation Instructions ---"
          cat <<EOF > ${INSTALL_PATH}/README.md
          # Kernel Installation Instructions

          This package contains a custom Linux kernel (${KERNEL_SUFFIX}) with debugging and development support.

          ## Installation Steps

          1. **Extract the tarball**:
             \`\`\`bash
             sudo tar -xzvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C /
             \`\`\`

          2. **Update module dependencies**:
             \`\`\`bash
             sudo depmod ${KERNEL_SUFFIX}
             \`\`\`

          3. **Ensure headers are accessible**:
             \`\`\`bash
             sudo ln -sf /usr/src/linux-headers-${KERNEL_SUFFIX} /lib/modules/${KERNEL_SUFFIX}/build
             sudo ln -sf /usr/src/linux-headers-${KERNEL_SUFFIX} /lib/modules/${KERNEL_SUFFIX}/source
             \`\`\`

          4. **Update bootloader (e.g., GRUB or extlinux)**:
             \`\`\`bash
             sudo update-grub
             \`\`\`

          5. **Reboot to the new kernel**:
             \`\`\`bash
             sudo reboot
             \`\`\`

          ## Notes
          - The kernel includes support for debugging (Ftrace, Kprobes, KGDB), BPF (for tools like bcc), and kheaders (/sys/kernel/kheaders.tar.xz).
          - Ensure /sys/kernel/debug is mounted for debugging tools.
          - For bcc, mount required directories as shown in your Docker command.

          EOF

          echo "--- Creating Tarball ---"
          tar -czvf ${GITHUB_WORKSPACE}/linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90