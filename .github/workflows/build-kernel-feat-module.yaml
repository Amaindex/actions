name: Build Kernel for VM (Using Local Config + Debug/Ftrace)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax from amaindex/linux)'
        required: true
        default: 'ax'
      config_name:
        description: 'Name of kernel config file in build-kernel/ directory'
        required: true
        default: 'config-6.12.24-0-virt'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]

    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4

      - name: Checkout Linux Repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          path: linux_source

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync

      - name: Configure Kernel
        working-directory: ./linux_source
        run: |
          echo "--- Using local config file ---"
          LOCAL_CONFIG_PATH="../build-kernel/${{ github.event.inputs.config_name }}"
          if [ ! -f "${LOCAL_CONFIG_PATH}" ]; then
            echo "ERROR: Config file not found at ${LOCAL_CONFIG_PATH}"
            exit 1
          fi
          cp "${LOCAL_CONFIG_PATH}" .config

          echo "--- Creating Debug/Ftrace Config Fragment ---"
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF5=y
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KGDB=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y
          CONFIG_IKCONFIG_PROC=y
          EOF

          echo "--- Creating Signature Disable Config Fragment ---"
          cat <<EOF > signature_disable.config
          CONFIG_MODULE_SIG=n
          CONFIG_MODULE_SIG_ALL=n
          CONFIG_MODULE_SIG_FORCE=n
          CONFIG_MODULE_SIG_KEY=""
          CONFIG_SYSTEM_TRUSTED_KEYRING=n
          CONFIG_SYSTEM_TRUSTED_KEYS=""
          CONFIG_SYSTEM_REVOCATION_LIST=n
          CONFIG_SYSTEM_REVOCATION_KEYS=""
          EOF

          echo "--- Merging Configurations ---"
          ./scripts/kconfig/merge_config.sh -m .config debug.config signature_disable.config

          echo "--- Ensuring Signature Options are Disabled ---"
          ./scripts/config --disable MODULE_SIG
          ./scripts/config --disable MODULE_SIG_ALL
          ./scripts/config --disable MODULE_SIG_FORCE
          ./scripts/config --set-str MODULE_SIG_KEY ""
          ./scripts/config --disable SYSTEM_TRUSTED_KEYRING
          ./scripts/config --set-str SYSTEM_TRUSTED_KEYS ""
          ./scripts/config --disable SYSTEM_REVOCATION_LIST
          ./scripts/config --set-str SYSTEM_REVOCATION_KEYS ""

          echo "--- Finalizing Configuration ---"
          make olddefconfig

          echo "--- Verifying Signature Options ---"
          grep -E 'CONFIG_MODULE_SIG|CONFIG_SYSTEM_TRUSTED_KEYRING|CONFIG_SYSTEM_TRUSTED_KEYS|CONFIG_SYSTEM_REVOCATION' .config || echo "No signature options found"

          echo "--- Setting Kernel Version Suffix ---"
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-deb11-6.1-local-${{ matrix.arch }}"
          LOCAL_VERSION_SUFFIX=$(echo "${LOCAL_VERSION_SUFFIX}" | head -c 63)
          ./scripts/config --set-str LOCALVERSION "${LOCAL_VERSION_SUFFIX}"
          make olddefconfig

      - name: Build Kernel and Modules
        working-directory: ./linux_source
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      - name: Prepare Kernel Package
        working-directory: ./linux_source
        run: |
          echo "--- Determining Kernel Version ---"
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          INSTALL_PATH=${GITHUB_WORKSPACE}/_install
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_SUFFIX}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/build
          rm -f ${INSTALL_PATH}/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Creating Tarball ---"
          tar -czvf ${GITHUB_WORKSPACE}/linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C ${INSTALL_PATH} .

      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90