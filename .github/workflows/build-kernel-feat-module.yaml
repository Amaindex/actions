name: Build Kernel with Config

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Build number (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
            gcc-aarch64-linux-gnu

      - name: Configure kernel
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            make defconfig
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig
          fi
          scripts/config --enable MODULES
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            make olddefconfig
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          fi

      - name: Enable debug, KVM, and ftrace features
        run: |
          scripts/config --enable DEBUG_KERNEL
          scripts/config --enable DEBUG_INFO
          scripts/config --enable GDB_SCRIPTS
          scripts/config --enable VIRTUALIZATION
          scripts/config --enable KVM
          scripts/config --enable FTRACE
          scripts/config --enable FUNCTION_TRACER
          scripts/config --enable FUNCTION_GRAPH_TRACER
          scripts/config --enable DYNAMIC_FTRACE
          scripts/config --enable FTRACE_MCOUNT_RECORD
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            scripts/config --enable KVM_INTEL
            scripts/config --enable KVM_AMD
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            scripts/config --enable KVM_ARM_HOST
          fi
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            make olddefconfig
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          fi

      - name: Build kernel and modules
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            make -j$(nproc)
            make modules -j$(nproc)
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules -j$(nproc)
          fi

      - name: Package kernel and modules
        run: |
          mkdir -p kernel-package
          # 提取内核版本
          KERNEL_VERSION=$(make kernelversion)
          # 构造版本字符串（移除多余后缀）
          VERSION=$(echo $KERNEL_VERSION | sed 's/-[a-zA-Z0-9]*$//')
          # 定义架构后缀
          ARCH_SUFFIX=${{ matrix.arch }}
          # 定义输出文件名
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            KERNEL_NAME="vmlinuz-${VERSION}-${{ github.event.inputs.build_number }}-${ARCH_SUFFIX}"
            MODULES_NAME="modules-${VERSION}-${{ github.event.inputs.build_number }}-${ARCH_SUFFIX}"
            SUFFIX="${VERSION}-${{ github.event.inputs.build_number }}-${ARCH_SUFFIX}"
          else
            KERNEL_NAME="vmlinuz-${VERSION}-${ARCH_SUFFIX}"
            MODULES_NAME="modules-${VERSION}-${ARCH_SUFFIX}"
            SUFFIX="${VERSION}-${ARCH_SUFFIX}"
          fi
          
          # 复制内核镜像
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            cp arch/x86/boot/bzImage kernel-package/${KERNEL_NAME}
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            cp arch/arm64/boot/Image kernel-package/${KERNEL_NAME}
          fi
          
          # 复制 System.map 和配置文件
          cp System.map kernel-package/System.map-${SUFFIX}
          cp .config kernel-package/config-${SUFFIX}
          
          # 安装模块到临时目录
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            make modules_install INSTALL_MOD_PATH=kernel-package
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install INSTALL_MOD_PATH=kernel-package
          fi
          
          # 获取实际的模块目录名
          FULL_MODULE_VERSION=$(ls kernel-package/lib/modules/)
          echo "FULL_MODULE_VERSION=$FULL_MODULE_VERSION" >> $GITHUB_ENV
          
          # 重命名模块目录以匹配格式
          mv kernel-package/lib/modules/${FULL_MODULE_VERSION} kernel-package/lib/modules/${SUFFIX}
          
          # 删除 build 和 source 符号链接（避免无效路径）
          rm -f kernel-package/lib/modules/${SUFFIX}/build
          rm -f kernel-package/lib/modules/${SUFFIX}/source
          
          # 打包内核和模块
          tar -czvf linux-kernel-${{ matrix.arch }}.tar.gz -C kernel-package .
          
          # 设置环境变量
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-${{ matrix.arch }}-${{ env.KERNEL_VERSION }}
          path: linux-kernel-${{ matrix.arch }}.tar.gz
          retention-days: 90