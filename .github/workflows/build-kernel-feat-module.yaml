name: Build Kernel for Server (QEMU/VirtIO)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64] # Assuming x86_64 build

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          # fetch-depth: 0 # Consider enabling if precise Git versioning is needed

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync

      - name: Configure Kernel
        run: |
          echo "--- Starting Kernel Configuration ---"
          make defconfig

          echo "--- Enabling Core Boot Requirements (Built-in) ---"
          # Essential drivers needed *before* initramfs (compile built-in =y)
          scripts/config --enable MODULES
          scripts/config --enable BLOCK
          scripts/config --enable BLK_DEV_SD      # SCSI disk (/dev/sda)
          scripts/config --enable SCSI            # Base SCSI
          scripts/config --enable VIRTIO_PCI      # VirtIO PCI bus
          scripts/config --enable VIRTIO_SCSI     # VirtIO SCSI controller
          scripts/config --enable EXT4_FS         # Root filesystem
          scripts/config --enable VFAT_FS         # EFI partition filesystem
          scripts/config --enable PARTITION_ADVANCED
          scripts/config --enable EFI_PARTITION   # GPT support
          scripts/config --enable MSDOS_PARTITION # MBR support
          scripts/config --enable BLK_DEV_INITRD  # Initramfs support
          scripts/config --enable DEVTMPFS
          scripts/config --enable DEVTMPFS_MOUNT

          echo "--- Enabling Common Server Features (Modules) ---"
          # Drivers loaded from initramfs or later (modules =m)
          scripts/config --module VIRTIO_NET      # Virtio Network card <-- MUST BE MODULE if not built-in
          scripts/config --module VIRTIO_BALLOON
          scripts/config --module VIRTIO_CONSOLE
          scripts/config --module VIRTIO_GPU
          scripts/config --module VIRTIO_INPUT
          scripts/config --module BLK_DEV_LOOP
          scripts/config --module BLK_DEV_NVME    # If needed for non-root disks
          scripts/config --module BLK_DEV_DM      # LVM, crypt
          scripts/config --module BLK_DEV_MD      # Software RAID
          # --- Other Filesystems (Modules) ---
          scripts/config --module BTRFS_FS
          scripts/config --module XFS_FS
          scripts/config --module NFS_FS
          scripts/config --module NFSD
          scripts/config --module ISO9660_FS
          # --- Networking (Modules) ---
          scripts/config --module BRIDGE
          scripts/config --module VLAN_8021Q
          # --- Storage Controllers & Protocols (Modules) ---
          scripts/config --module AHCI
          scripts/config --module ATA_PIIX
          scripts/config --module SCSI_SAS_LIBSAS
          scripts/config --module ISCSI_TCP
          # --- Encryption (Modules) ---
          scripts/config --module DM_CRYPT
          scripts/config --module CRYPTO_CBC
          scripts/config --module CRYPTO_XTS
          scripts/config --module CRYPTO_AES_X86_64

          echo "--- Enabling Debug and KVM Features (Built-in/Module) ---"
          scripts/config --enable DEBUG_KERNEL
          scripts/config --enable DEBUG_INFO
          scripts/config --enable DEBUG_INFO_DWARF5
          scripts/config --enable GDB_SCRIPTS
          scripts/config --enable FTRACE
          scripts/config --enable FUNCTION_TRACER
          scripts/config --enable FUNCTION_GRAPH_TRACER
          scripts/config --enable VIRTUALIZATION
          scripts/config --enable KVM
          scripts/config --enable KVM_INTEL # Built-in usually better for host
          scripts/config --enable KVM_AMD   # Built-in usually better for host

          echo "--- Disabling Unnecessary Drivers ---"
          scripts/config --disable DRM_AMDGPU
          scripts/config --disable DRM_RADEON
          scripts/config --disable DRM_NOUVEAU
          scripts/config --disable DRM_I915
          scripts/config --disable DRM_BOCHS
          scripts/config --disable SND
          scripts/config --disable CFG80211
          scripts/config --disable MAC80211
          scripts/config --disable TIGON3
          scripts/config --disable E100
          scripts/config --disable E1000E # Disable if sure only VirtIO NIC used
          scripts/config --disable R8169
          scripts/config --disable USB_COMMON # Be careful if console/debug needs USB
          scripts/config --disable USB_UHCI_HCD

          echo "--- Applying Initial Configuration ---"
          make olddefconfig

          echo "--- Setting Kernel Version Suffix (CONFIG_LOCALVERSION) ---"
          # Construct local version string (e.g., -147-amd64 or -amd64)
          LOCAL_VERSION_SUFFIX=""
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            LOCAL_VERSION_SUFFIX="-${{ github.event.inputs.build_number }}"
          fi
          # Append arch consistently. Use matrix.arch
          LOCAL_VERSION_SUFFIX="${LOCAL_VERSION_SUFFIX}-${{ matrix.arch }}" # Result: -147-amd64 or -amd64

          echo "Setting CONFIG_LOCALVERSION=${LOCAL_VERSION_SUFFIX}"
          # Use --set-str to ensure it's treated as a string
          scripts/config --set-str CONFIG_LOCALVERSION "${LOCAL_VERSION_SUFFIX}"

          echo "--- Finalizing Configuration with Local Version ---"
          # Run olddefconfig again to apply CONFIG_LOCALVERSION and resolve any new dependencies
          make olddefconfig

          echo "--- Configuration Complete. Verifying key options ---"
          grep -E "CONFIG_VIRTIO_PCI=y|CONFIG_VIRTIO_SCSI=y|CONFIG_BLK_DEV_SD=y|CONFIG_EXT4_FS=y|CONFIG_VIRTIO_NET=m|CONFIG_LOCALVERSION=" .config || true

      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      - name: Prepare Kernel Package for Manual Install
        run: |
          echo "--- Determining Full Kernel Version ---"
          # Use 'make kernelrelease' to get the final version string including LOCALVERSION
          KERNEL_SUFFIX=$(make -s kernelrelease)
          echo "Full Kernel Version Suffix: ${KERNEL_SUFFIX}"
          # Set environment variable for subsequent steps (like artifact naming)
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          mkdir -p kernel_package/boot
          mkdir -p kernel_package/lib/modules # modules_install will create the versioned subdir

          echo "--- Copying Kernel Files ---"
          cp arch/x86/boot/bzImage kernel_package/boot/vmlinuz-${KERNEL_SUFFIX}
          cp System.map kernel_package/boot/System.map-${KERNEL_SUFFIX}
          cp .config kernel_package/boot/config-${KERNEL_SUFFIX}

          echo "--- Installing Modules ---"
          # INSTALL_MOD_PATH is the *prefix* where /lib/modules/<KERNEL_SUFFIX> will be created
          make modules_install INSTALL_MOD_PATH=kernel_package/

          echo "--- Verifying Module Directory ---"
          # Check if the expected directory exists
          if [ ! -d "kernel_package/lib/modules/${KERNEL_SUFFIX}" ]; then
            echo "ERROR: Module directory kernel_package/lib/modules/${KERNEL_SUFFIX} was not created!"
            echo "Contents of kernel_package/lib/modules/:"
            ls -l kernel_package/lib/modules/
            exit 1
          fi
          # No need to rename anymore! 'make modules_install' uses KERNEL_SUFFIX automatically.

          # Optional: Remove build/source symlinks if they exist and aren't needed
          rm -f kernel_package/lib/modules/${KERNEL_SUFFIX}/build
          rm -f kernel_package/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents ---"
          ls -lR kernel_package/

          echo "--- Creating Tarball ---"
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C kernel_package .

      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          # Use the full kernel version determined by 'make kernelrelease'
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }}
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90