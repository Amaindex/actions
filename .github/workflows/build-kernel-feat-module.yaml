name: Build Kernel for VM with Local Config

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax from amaindex/linux)'
        required: true
        default: 'master'
      config_name:
        description: 'Name of kernel config file in build-kernel/ directory'
        required: true
        default: 'config-6.12.24-0-virt-edited'

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    env:
      INSTALL_DIR_NAME: _install

    strategy:
      matrix:
        arch: [amd64]

    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4

      - name: Checkout Linux Repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          path: linux_source

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync \
                                  libbpf-dev

      - name: Configure Kernel
        working-directory: ./linux_source
        run: |
          echo "--- Copying Local Config ---"
          LOCAL_CONFIG_PATH="../build-kernel/${{ github.event.inputs.config_name }}"
          if [ ! -f "${LOCAL_CONFIG_PATH}" ]; then
            echo "ERROR: Config file not found at ${LOCAL_CONFIG_PATH}"
            exit 1
          fi
          cp "${LOCAL_CONFIG_PATH}" .config
          echo "Copied ${LOCAL_CONFIG_PATH} to .config"

          echo "--- Creating Debug/Ftrace Config Fragment ---"
          cat <<EOF > debug.config
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_BTF=y
          CONFIG_DEBUG_INFO_REDUCED=n
          CONFIG_GDB_SCRIPTS=y
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_FUNCTION_GRAPH_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_MAGIC_SYSRQ=y
          CONFIG_IKCONFIG=y
          CONFIG_IKCONFIG_PROC=y
          CONFIG_KHEADERS=y
          CONFIG_BPF=y
          CONFIG_BPF_SYSCALL=y
          CONFIG_BPF_JIT=y
          CONFIG_BPF_JIT_ALWAYS_ON=y
          CONFIG_BPF_EVENTS=y
          EOF

          echo "--- Merging Debug Config ---"
          ./scripts/kconfig/merge_config.sh -m .config debug.config
          echo "Merged debug.config"

          echo "--- Disabling Signature Options ---"
          ./scripts/config --disable MODULE_SIG
          ./scripts/config --disable MODULE_SIG_ALL
          ./scripts/config --disable MODULE_SIG_FORCE
          ./scripts/config --disable SYSTEM_TRUSTED_KEYRING
          ./scripts/config --disable SYSTEM_REVOCATION_LIST
          echo "Disabled signature options"

          echo "--- Setting LOCALVERSION ---"
          ./scripts/config --set-str LOCALVERSION ""
          echo "Set LOCALVERSION to empty"

          echo "--- Finalizing Configuration ---"
          make olddefconfig
          echo "Ran olddefconfig to finalize config"

          echo "--- Verifying Configuration ---"
          grep -E 'CONFIG_MODULE_SIG=|CONFIG_SYSTEM_TRUSTED_KEYRING=|CONFIG_SYSTEM_REVOCATION_LIST=' .config || echo "Signature options disabled"
          grep 'CONFIG_LOCALVERSION=' .config
          grep 'CONFIG_KHEADERS=' .config
          grep 'CONFIG_DEBUG_INFO_BTF=' .config

      - name: Build Kernel and Modules
        working-directory: ./linux_source
        run: |
          echo "--- Building Kernel (bzImage) ---"
          make -j$(nproc) bzImage
          echo "--- Building Modules ---"
          make -j$(nproc) modules

      - name: Package Kernel and Modules
        working-directory: ./linux_source
        run: |
          echo "--- Determining Kernel Version ---"
          KERNEL_VERSION=$(make -s kernelrelease)
          if [ -z "${KERNEL_VERSION}" ]; then
            echo "ERROR: Failed to determine kernel version"
            exit 1
          fi
          echo "Kernel Version: ${KERNEL_VERSION}"
          echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV

          echo "--- Setting Up Installation Directory ---"
          INSTALL_PATH="${GITHUB_WORKSPACE}/${INSTALL_DIR_NAME}"
          mkdir -p ${INSTALL_PATH}/boot
          mkdir -p ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}
          mkdir -p ${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_VERSION}

          echo "--- Copying Boot Files ---"
          cp arch/x86/boot/bzImage ${INSTALL_PATH}/boot/vmlinuz-${KERNEL_VERSION}
          cp System.map ${INSTALL_PATH}/boot/System.map-${KERNEL_VERSION}
          cp .config ${INSTALL_PATH}/boot/config-${KERNEL_VERSION}

          echo "--- Installing Modules ---"
          make modules_install INSTALL_MOD_PATH=${INSTALL_PATH}

          echo "--- Installing Headers ---"
          make headers_install INSTALL_HDR_PATH=${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_VERSION}

          echo "--- Creating Symlinks ---"
          ln -sf /usr/src/linux-headers-${KERNEL_VERSION} ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}/build
          ln -sf /usr/src/linux-headers-${KERNEL_VERSION} ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}/source

          echo "--- Running depmod ---"
          depmod -b ${INSTALL_PATH} -F System.map ${KERNEL_VERSION}

          echo "--- Creating Installation Script ---"
          cat <<EOF > ${INSTALL_PATH}/install_kernel.sh
          #!/bin/bash
          set -e
          KERNEL_VERSION="${KERNEL_VERSION}"
          PACKAGE_NAME="linux-kernel-package-\${KERNEL_VERSION}.tar.gz"

          echo "--- Installing Kernel \${KERNEL_VERSION} ---"
          if [ "\$(id -u)" -ne 0 ]; then
            echo "ERROR: Must run as root"
            exit 1
          fi

          if [ ! -f "\${PACKAGE_NAME}" ]; then
            echo "ERROR: Package \${PACKAGE_NAME} not found"
            exit 1
          fi

          echo "Extracting package..."
          tar -xzvf "\${PACKAGE_NAME}" -C /

          echo "Generating initramfs..."
          if command -v update-initramfs &> /dev/null; then
            update-initramfs -c -k "\${KERNEL_VERSION}"
          elif command -v dracut &> /dev/null; then
            dracut --force "/boot/initramfs-\${KERNEL_VERSION}.img" "\${KERNEL_VERSION}"
          else
            echo "WARNING: No initramfs tool found. Manual generation required."
          fi

          echo "Updating bootloader..."
          if command -v update-grub &> /dev/null; then
            update-grub
          elif command -v grub2-mkconfig &> /dev/null; then
            grub2-mkconfig -o /boot/grub2/grub.cfg
          else
            echo "WARNING: No bootloader update tool found. Manual update required."
          fi

          echo "Verifying installation..."
          ls -l /boot | grep "\${KERNEL_VERSION}" || echo "No boot files found"
          ls -l /lib/modules | grep "\${KERNEL_VERSION}" || echo "No modules found"
          ls -l /usr/src | grep "\${KERNEL_VERSION}" || echo "No headers found"

          echo "Kernel \${KERNEL_VERSION} installed. Reboot to use: sudo reboot"
          EOF
          chmod +x ${INSTALL_PATH}/install_kernel.sh

          echo "--- Verifying Staged Files ---"
          ls -l ${INSTALL_PATH}/boot/
          ls -l ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}/
          ls -l ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}/modules.*
          ls -l ${INSTALL_PATH}/usr/src/linux-headers-${KERNEL_VERSION}/
          ls -l ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}/build
          ls -l ${INSTALL_PATH}/lib/modules/${KERNEL_VERSION}/source

          echo "--- Creating Tarball ---"
          cd ${GITHUB_WORKSPACE}
          tar -czvf linux-kernel-package-${KERNEL_VERSION}.tar.gz -C ${INSTALL_DIR_NAME} .

      - name: Upload Kernel Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_VERSION }}
          path: linux-kernel-package-${{ env.KERNEL_VERSION }}.tar.gz
          retention-days: 90
