name: Build Kernel for Server (QEMU/VirtIO)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (e.g., ax)'
        required: true
        default: 'ax'
      build_number:
        description: 'Optional build number suffix (e.g., 147)'
        required: false
        default: ''

jobs:
  build-kernel:
    runs-on: ubuntu-latest # Use a sufficiently recent runner
    strategy:
      matrix:
        arch: [amd64] # Assuming x86_64 build

    steps:
      - name: Checkout linux repository
        uses: actions/checkout@v4
        with:
          repository: amaindex/linux
          ref: ${{ github.event.inputs.branch }}
          # Fetch depth 0 is recommended for accurate versioning if needed, but can be slow
          # fetch-depth: 0

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libelf-dev libssl-dev \
                                  gcc make libncurses-dev kmod cpio dwarves pahole rsync

      - name: Configure Kernel
        run: |
          echo "--- Starting Kernel Configuration ---"
          # Start with a default config
          make defconfig

          echo "--- Enabling Core Boot Requirements (Built-in) ---"
          # --- Essential for Boot ---
          scripts/config --enable MODULES         # Keep module support enabled generally
          scripts/config --enable BLOCK           # Core block layer
          scripts/config --enable BLK_DEV_SD      # SCSI disk support (/dev/sda)
          scripts/config --enable SCSI            # Base SCSI support
          scripts/config --enable VIRTIO_PCI      # VirtIO PCI bus driver (Needed for SCSI & Net)
          scripts/config --enable VIRTIO_SCSI     # VirtIO SCSI controller driver
          scripts/config --enable EXT4_FS         # Root filesystem driver
          scripts/config --enable VFAT_FS         # EFI partition filesystem driver
          scripts/config --enable PARTITION_ADVANCED # Enable advanced partition types
          scripts/config --enable EFI_PARTITION   # GUID Partition Table (GPT) support
          scripts/config --enable MSDOS_PARTITION # MBR partition support (fallback/common)
          scripts/config --enable BLK_DEV_INITRD  # Support for initramfs block devices
          scripts/config --enable DEVTMPFS        # /dev filesystem
          scripts/config --enable DEVTMPFS_MOUNT  # Automount /dev

          echo "--- Enabling Common Server Features (Modules) ---"
          # --- Virtio Devices (Modules where appropriate) ---
          scripts/config --module VIRTIO_NET      # Virtio Network card
          scripts/config --module VIRTIO_BALLOON  # Virtio Memory Balloon
          scripts/config --module VIRTIO_CONSOLE  # Virtio Console
          scripts/config --module VIRTIO_GPU      # Virtio GPU (basic modesetting might be useful)
          scripts/config --module VIRTIO_INPUT    # Virtio Input devices (mouse/kbd)

          # --- Other Block Devices (Modules) ---
          scripts/config --module BLK_DEV_LOOP    # Loopback devices
          scripts/config --module BLK_DEV_NVME    # NVMe drives (good to have)
          scripts/config --module BLK_DEV_DM      # Device Mapper (LVM, crypt)
          scripts/config --module BLK_DEV_MD      # Software RAID (MD)
          scripts/config --module BLK_DEV_SR      # SCSI CD-ROM (less common on servers)
          # scripts/config --module BLK_DEV_BSG   # Generic SCSI device access

          # --- Other Filesystems (Modules) ---
          scripts/config --module BTRFS_FS
          scripts/config --module XFS_FS
          scripts/config --module NFS_FS          # NFS Client
          scripts/config --module NFSD            # NFS Server
          scripts/config --module ISO9660_FS      # ISO9660 for CD/DVD images

          # --- Networking (Modules) ---
          # TCP/IP stack is usually built-in via defconfig
          scripts/config --module BRIDGE          # Network bridging
          scripts/config --module VLAN_8021Q      # VLAN support

          # --- Storage Controllers & Protocols (Modules) ---
          scripts/config --module AHCI            # AHCI SATA controller (common fallback)
          scripts/config --module ATA_PIIX        # PIIX IDE (present in VM, module ok)
          scripts/config --module SCSI_SAS_LIBSAS # SAS support
          scripts/config --module ISCSI_TCP       # iSCSI support

          # --- Encryption (Modules) ---
          scripts/config --module DM_CRYPT
          scripts/config --module CRYPTO_CBC
          scripts/config --module CRYPTO_XTS
          scripts/config --module CRYPTO_AES_X86_64 # HW accelerated AES if CPU supports

          echo "--- Enabling Debug and KVM Features (Built-in) ---"
          # --- Debugging ---
          scripts/config --enable DEBUG_KERNEL
          scripts/config --enable DEBUG_INFO      # Needed for GDB, pahole, etc.
          scripts/config --enable DEBUG_INFO_DWARF5 # Or DWARF4 if preferred
          scripts/config --enable GDB_SCRIPTS
          scripts/config --enable FTRACE
          scripts/config --enable FUNCTION_TRACER
          scripts/config --enable FUNCTION_GRAPH_TRACER
          # scripts/config --enable DYNAMIC_FTRACE # Can increase overhead slightly
          # scripts/config --enable FTRACE_MCOUNT_RECORD

          # --- Virtualization (KVM Host) ---
          scripts/config --enable VIRTUALIZATION
          scripts/config --enable KVM
          scripts/config --enable KVM_INTEL
          scripts/config --enable KVM_AMD

          echo "--- Disabling Unnecessary Drivers ---"
          # --- Graphics (Keep basic console, disable complex drivers) ---
          scripts/config --disable DRM_AMDGPU
          scripts/config --disable DRM_RADEON
          scripts/config --disable DRM_NOUVEAU
          scripts/config --disable DRM_I915       # Common Intel iGPU driver
          scripts/config --disable DRM_BOCHS      # Disable specific Bochs driver if VIRTIO_GPU is preferred module

          # --- Sound ---
          scripts/config --disable SND

          # --- Wireless ---
          scripts/config --disable CFG80211
          scripts/config --disable MAC80211

          # --- Uncommon/Desktop NICs ---
          scripts/config --disable TIGON3         # Broadcom NIC
          scripts/config --disable E100           # Intel NIC
          scripts/config --disable E1000E         # Intel NIC (Keep if unsure, disable if using VirtIO)
          scripts/config --disable R8169          # Realtek NIC

          # --- Misc Unneeded ---
          scripts/config --disable USB_COMMON     # Disable USB if absolutely not needed (risky)
          scripts/config --disable USB_UHCI_HCD   # Disable specific USB1 controller if safe

          echo "--- Finalizing Configuration ---"
          # Apply changes and resolve dependencies
          make olddefconfig

          echo "--- Configuration Complete. Resulting .config ---"
          # Optional: Display key config options for verification
          grep -E "CONFIG_VIRTIO_PCI=|CONFIG_VIRTIO_SCSI=|CONFIG_BLK_DEV_SD=|CONFIG_EXT4_FS=|CONFIG_VIRTIO_NET=|CONFIG_KVM=" .config || true

      - name: Build Kernel and Modules
        run: |
          make -j$(nproc) bzImage
          make -j$(nproc) modules

      - name: Prepare Kernel Package for Manual Install
        run: |
          mkdir -p kernel_package/boot
          mkdir -p kernel_package/lib/modules

          # Determine kernel version string (e.g., 6.15.0)
          KERNEL_VERSION_BASE=$(make kernelversion | sed 's/-.*//') # Extract base version like 6.15.0
          # Construct the final suffix (e.g., 6.15.0-147-amd64 or 6.15.0-amd64)
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            KERNEL_SUFFIX="${KERNEL_VERSION_BASE}-${{ github.event.inputs.build_number }}-${{ matrix.arch }}"
          else
            KERNEL_SUFFIX="${KERNEL_VERSION_BASE}-${{ matrix.arch }}"
          fi
          echo "Using Kernel Suffix: ${KERNEL_SUFFIX}"
          echo "KERNEL_SUFFIX=${KERNEL_SUFFIX}" >> $GITHUB_ENV

          # Copy Kernel Image
          cp arch/x86/boot/bzImage kernel_package/boot/vmlinuz-${KERNEL_SUFFIX}

          # Copy System.map and Config
          cp System.map kernel_package/boot/System.map-${KERNEL_SUFFIX}
          cp .config kernel_package/boot/config-${KERNEL_SUFFIX}

          # Install modules to a temporary location within the package dir
          make modules_install INSTALL_MOD_PATH=kernel_package/

          # Find the auto-generated module directory name (like 6.15.0+)
          INSTALLED_MOD_DIR=$(ls kernel_package/lib/modules/)
          echo "Detected installed modules directory: ${INSTALLED_MOD_DIR}"

          # Rename the module directory to the desired final name
          if [ "${INSTALLED_MOD_DIR}" != "${KERNEL_SUFFIX}" ]; then
            echo "Renaming module directory from ${INSTALLED_MOD_DIR} to ${KERNEL_SUFFIX}"
            mv kernel_package/lib/modules/${INSTALLED_MOD_DIR} kernel_package/lib/modules/${KERNEL_SUFFIX}
          fi

          # Remove build/source symlinks (not needed for runtime)
          rm -f kernel_package/lib/modules/${KERNEL_SUFFIX}/build
          rm -f kernel_package/lib/modules/${KERNEL_SUFFIX}/source

          echo "--- Kernel Package Contents ---"
          ls -lR kernel_package/

          # Create the final tarball
          tar -czvf linux-kernel-package-${KERNEL_SUFFIX}.tar.gz -C kernel_package .

      - name: Upload Kernel Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-package-${{ env.KERNEL_SUFFIX }} # Use dynamic name based on suffix
          path: linux-kernel-package-${{ env.KERNEL_SUFFIX }}.tar.gz
          retention-days: 90 # Keep artifacts for 90 days